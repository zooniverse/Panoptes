#+TITLE: pundit-notes

* Links
Links are currently a big mess. Here's a list of the various ways we have to
update links. "Routes" means that it's available through `update_links`.
The schemas mean that it's available when directly modifying the resource itself.

** Access Control List
*** ???
project (can_be_linked, scope_for :update)
collection (can_be_linked, scope_for :update)
organization (can_be_linked, scope_for :update)

** Aggregation
*** Create schema:
subject (implicit, Subject.scope_for :show)
workflow (can_be_linked, Workflow.scope_for :update)
*** Update schema:
subject
workflow

** Classification
*** Create schema:
project (implicit, Project.scope_for :show)
workflow (implicit, Workflow.scope_for :show)
subjects[]
*** Update schema: none

** Collection
*** Routes
subjects
default_subject
*** Create strongparams:
default_subject
project
projects[]
subjects[]
owner (polymorphic)
*** Update strongparams:
default_subject
subjects[]
*** ???
user (can_be_linked, User.scope_for :update)
user_collection_preference (via PreferencesLink, can_be_linked, scope_for :show)

** (User)CollectionPreference
*** Create strongparams:
collection
*** ???
user (can_be_linked, User.all)

** Event
*** Create schema: none

** Field guide
*** Create schema:
project !!! CONFIRMED SECURITY ISSUE. Any user can link to any public project
*** Update schema: none

** Medium
*** Create schema: none
*** Update schema: none

** Membership
*** ???
user (can_be_linked, User.all)

** Organization
*** Routes
projects !!! POSSIBLE SECURITY ISSUE
*** Update schema:
project
*** ???
organization_content (via Translatable, can_be_linked, scope_for :translate)

** OrganizationContents
*** Create strongparams:
organization !!! POSSIBLE SECURITY ISSUE

** Project
*** Routes:
subject_sets
workflows
*** Create schema:
owner (polymorphic)
workflows[] (creates copies of those workflows)
subject_sets[] (can_be_linked, scope_for :show)
*** Update schema:
workflows[] (creates copies of those workflows)
subject_sets[]
*** ???
organization (can_be_linked, scope_for :update)
user (can_be_linked, scope_for :update)
user_project_preference (via PreferencesLink, can_be_linked mod, scope_for :show)
project_content (via Translatable, can_be_linked, scope_for :translate)
*** ??? Test for, but nowhere in actual code?
subject

** ProjectContents
*** Create strongparams
project !!! SECURITY

** Project Preference
*** Create schema:
project
*** Update schema:
project
*** Update settings schema: none
*** ???
user (can_be_linked, User.all)

** SetMemberSubjects
*** Routes:
retired_workflows
*** Create strongparams
subject
subject_set (can_be_linked, scope_for :update)
retired_workflows[]
*** Update strongparams
retired_workflows[]

** Subject
*** Create schema:
project (can_be_linked, scope_for :update)
subject_sets[] !!! POSSIBLE SECURITY ISSUE
owner (polymorphic)
*** Update schema:
subject_sets []

** SubjectSet
*** Routes:
subjects
*** Create schema:
project (can_be_linked, scope_for :update)
workflows[] (can_be_linked, scope_for same_project? :model)
collection
subjects []
*** Update schema:
workflows []
subjects []

** SubjectSetImport
*** Routes:
subject_sets
users !!! WTF WAS I THINKING
*** Create schema:
subject_set (can_be_linked, scope_for :update)

** Translation
*** Create: none
*** Update: none

** Tutorial
*** Create schema
project !!! POSSIBLE SECURITY ISSUE
workflows [] !!! POSSIBLE SECURITY ISSUE. Also no check to ensure workflow under project?
*** Update schema: none

** Users
*** Routes
user_groups

** User Groups
*** Routes
users (can_be_linked, User.all)
*** Create strongparams:
users[]
*** ???
project (can_be_linked, scope_for :edit_project)

** workflows
*** Routes:
subject_sets
retired_subjects
tutorials
*** Create schema:
project (can_be_linked, scope_for :update)
tutorial_subject
subject_sets[] (can_be_linked, scope_for :show)
*** Update schema:
tutorial_subject
subject_sets[]
tutorials []
*** ???
workflow_content (via Translatable, can_be_linked, scope_for :translate)

** workflow contents
*** Create schema:
workflow !!! POSSIBLE SECURITY ISSUE
*** Update schema: none
